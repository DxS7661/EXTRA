#include <stdio.h>
#include <stdlib.h>
#include <time.h>

#define ROWS_W 3
#define COLS_W 2
#define COLS_X 2

void fullyConnectedLayer(float* W, float* X, float* output) {
    #pragma acc parallel loop present(W[0:ROWS_W*COLS_W], X[0:COLS_X], output[0:ROWS_W])
    for (int i = 0; i < ROWS_W; ++i) {
        output[i] = 0.0;
        for (int j = 0; j < COLS_W; ++j) {
            output[i] += W[i * COLS_W + j] * X[j];
        }
        // Apply ReLU activation function
        output[i] = (output[i] > 0) ? output[i] : 0;
    }
}

int main() {
    float *h_W, *h_X, *h_output;  // Host arrays

    // Allocate memory on the host
    h_W = (float*)malloc(ROWS_W * COLS_W * sizeof(float));
    h_X = (float*)malloc(COLS_X * sizeof(float));
    h_output = (float*)malloc(ROWS_W * sizeof(float));

    // Initialize host data with larger arbitrary numbers
    for (int i = 0; i < ROWS_W; ++i) {
        for (int j = 0; j < COLS_W; ++j) {
            h_W[i * COLS_W + j] = (i * COLS_W + j + 1) * 1000.0;  // Larger arbitrary numbers
        }
    }

    for (int i = 0; i < COLS_X; ++i) {
        h_X[i] = (i + 1) * 2000.0;  // Larger arbitrary numbers
    }

    // Measure execution time
    clock_t start_time = clock();

    // Perform fully connected layer operation on GPU using OpenACC
    fullyConnectedLayer(h_W, h_X, h_output);

    // Calculate execution time
    clock_t end_time = clock();
    double execution_time = ((double)(end_time - start_time)) / CLOCKS_PER_SEC;

    // Display results
    printf("Input X:\n");
    for (int i = 0; i < COLS_X; ++i) {
        printf("%f ", h_X[i]);
    }

    printf("\n\nWeight Matrix W:\n");
    for (int i = 0; i < ROWS_W; ++i) {
        for (int j = 0; j < COLS_W; ++j) {
            printf("%f ", h_W[i * COLS_W + j]);
        }
        printf("\n");
    }

    printf("\nOutput after fully connected layer with ReLU activation:\n");
    for (int i = 0; i < ROWS_W; ++i) {
        printf("%f ", h_output[i]);
    }

    printf("\n\nExecution Time: %f seconds\n", execution_time);

    // Free allocated memory
    free(h_W);
    free(h_X);
    free(h_output);

    return 0;
}
